<HTML>
<HEAD>
<TITLE>FragmentLinker Direct3D Sample</TITLE>
<STYLE TYPE="text/css">
.h1 { font-family: tahoma; font-weight: bold; font-size: 130%; }
.h2 { font-family: arial; font-weight: bold; vertical-align: super; }
.h3 { font-family: arial; font-weight: bold; vertical-align: super; }
.p { font-family: arial; font-size: 80%; }
.header { padding: 3px; font-family: tahoma; font-weight: bold; color: white }
.chart { font-family: monospace; font-size: 75%; }
</STYLE>
</HEAD>

<BODY bgColor=#ffffff MARGINHEIGHT="2" TOPMARGIN=2 LEFTMARGIN=2 RIGHTMARGIN=2>

<!-- HEADER - DO NOT MODIFY -->
<TABLE BACKGROUND="doc/header_background.gif" WIDTH="100%" BORDER=0 CELLPADDING=0 CELLSPACING=0>
<TR>
<TD ALIGN="left"><IMG SRC="doc/header_left.gif" BORDER=0></TD>
<TD ALIGN="right"><IMG SRC="doc/header_right.gif" BORDER=0></TD>
</TR>
</TABLE>
<!-- END HEADER -->

<!-- MASTER TABLE - DO NOT MODIFY -->
<TABLE WIDTH="100%" BORDER=0 CELLPADDING=20>
<TR>
<TD CLASS="p">
<!-- END MASTER TABLE -->

<FONT CLASS="h1">
<!-- INSERT SAMPLE NAME -->
FragmentLinker Sample
<!-- END SAMPLE NAME -->
</FONT>
<HR>

<TABLE WIDTH="100%" BGCOLOR="#FFFFFF" BORDER=0 CELLPADDING=10 CELLSPACING=0>
<TR>
<TD CLASS="p">
<BR CLEAR="left">
<IMG style="MARGIN-TOP: -7px; MARGIN-LEFT: -20px" hspace=20 src="FragmentLinker.gif" align=left vspace=10 >
<FONT CLASS="h2">Description</FONT><BR>
<!-- INSERT SAMPLE DESCRIPTION -->
This sample shows how to use the FragmentLinker class. Shader source code can be split into a series of shader fragments, which are compiled separately and linked together to form a complete shader; this linking stage is very efficient, making it suitable for runtime use. In this way a Direct3D application can custom-build an appropriate shader for the current graphics card. 
<!-- END SAMPLE DESCRIPTION -->
<BR CLEAR="left">
<BR CLEAR="left">
</TD>
</TR>
</TABLE>

<HR>
<BR CLEAR="left">
<FONT CLASS="h2">Path</FONT>
<TABLE STYLE="margin-left: -4px" CELLSPACING=4 CELLPADDING=4 BORDER=0>
<TR>
<!-- PATH INFORMATION -->
<TD CLASS="chart" BGCOLOR=#DDDDDD ALIGN="right"><B>Source:</B></TD>
<TD CLASS="chart" BGCOLOR=#EEEEEE>Samples\Managed\Direct3D\FragmentLinker</TD>
<!-- END PATH INFORMATION -->
</TR>
<TR>
<!-- PATH INFORMATION -->
<TD CLASS="chart" BGCOLOR=#DDDDDD ALIGN="right"><B>Executable:</B></TD>
<TD CLASS="chart" BGCOLOR=#EEEEEE>Samples\Managed\Direct3D\bin\csFragmentLinker.exe</TD>
<!-- END PATH INFORMATION -->
</TR>
</TABLE>
<P>
<FONT CLASS="h2">Sample Overview</FONT><BR>
Large-scale Direct3D applications commonly employ a large set of redundant shaders covering every supported fallback case for a given technique (often generated by uniform parameters) from which the appropriate shader for the current graphics hardware is selected at runtime. This approach can result in a large amount of compiled shaders being included with the application, only a small fraction of which are ever used on a given machine. Using shader fragments, the desired shader for the current graphics card can be built at runtime. 
<P>
<FONT CLASS="h2">How does the sample work?</FONT><BR>
This sample links together one of two vertex shader fragments which handle projection (vertex animated or static) and one of two vertex shader fragments which handle vertex lighting (diffuse enabled or ambient only). These fragments are compiled once during initialization and are then linked together at runtime.<BR>
<BR>
There are only a few steps which need to be followed when using shader fragments in your application:<BR>
<OL>
<LI> Create the FragmentLinker object
<LI> Load and compile the shader fragments by calling <B>GatherFragments</B>, <B>GatherFragmentsFromFile</B>, or <B>GatherFragmentsFromStream</B>
<LI> Add the compiled fragments to the linker's internal list with a call to <B>FragmentLinker.AddFragments</B>. This list defines the complete set of all fragments, from which a subset will be linked to create a shader.
<LI> Retrieve handles of the fragments you want linked through calls to <B>FragmentLinker.GetFragmentHandle</B>
<LI> Link together a subset of the added fragments by passing fragment handles to the <B>FragmentLinker.LinkVertexShader</B>, <B>FragmentLinker.LinkPixelShader</B>, or <B>FragmentLinker.LinkShader</B> method. These methods create an interface to a compiled shader which can be used for rendering.
</OL>
<P>
<BR>
The sample application performs the above steps upon device creation within the <B>OnCreateDevice</B> function:
<BR>
<BR>
<TABLE STYLE="MARGIN-LEFT: -4px" CELLSPACING="4" CELLPADDING="10" BORDER="0">
<TR>
<TD CLASS="chart" BGCOLOR="#eeeeee">
<BR>
<PRE>
// Create the fragment linker interface
fragmentLinker = new FragmentLinker(e.Device, 0);

// Compile the fragments to a buffer. The fragments must be linked together to form
// a shader before they can be used for rendering.
path = Utility.FindMediaFile("FragmentLinker.fx");
compiledFragments = Microsoft.DirectX.Direct3D.FragmentLinker.GatherFragmentsFromFile(path, null, null, shaderFlags);

// Build the list of compiled fragments
fragmentLinker.AddFragments(compiledFragments);

// Store the fragment handles
ComboBox cb1 = sampleUI.GetComboBox(Lighting);
cb1.Clear();
cb1.AddItem("Ambient", fragmentLinker.GetFragmentHandle("AmbientFragment"));
cb1.AddItem("Ambient & Diffuse", fragmentLinker.GetFragmentHandle("AmbientDiffuseFragment"));

ComboBox cb2 = sampleUI.GetComboBox(Animation);
cb2.Clear();
cb2.AddItem("On" , fragmentLinker.GetFragmentHandle("ProjectionFragment_Animated"));
cb2.AddItem("Off", fragmentLinker.GetFragmentHandle("ProjectionFragment_Static"));

// Link the desired fragments to create the vertex shader
LinkVertexShader();
</PRE>
</TD>
</TR>
</TABLE>
<BR>
The final linking step is performed within the <B>LinkVertexShader</B> helper function. In addition to being called upon device creation, this function is also called whenever the user changes a fragment combobox selection. The currently selected fragments are retrieved from the user interface controls, the shader is quickly linked, and the new shader is passed to the effect file:
<BR>
<BR>
<TABLE STYLE="MARGIN-LEFT: -4px" CELLSPACING="4" CELLPADDING="10" BORDER="0">
<TR>
<TD CLASS="chart" BGCOLOR="#eeeeee">
<BR>
<PRE>
private void LinkVertexShader()
{
    const int NumberFragments = 2;
    EffectHandle[] aHandles = new EffectHandle[NumberFragments];
    
    aHandles[0] = sampleUI.GetComboBox(Animation).GetSelectedData() as EffectHandle;
    aHandles[1] = sampleUI.GetComboBox(Lighting).GetSelectedData() as EffectHandle;

    // Link the fragments together to form a shader
    string errors;
    VertexShader vertexShader = fragmentLinker.LinkVertexShader("vs_1_1", shaderFlags, aHandles, out errors);

    // Associate this vertex shader with the effect object
    effect.SetValue("MyVertexShader", vertexShader);
}
</PRE>
</TD>
</TR>
</TABLE>
<BR>
<BR>
<FONT CLASS="h2">Resources</FONT><BR>
The syntax for writing shader fragments is detailed in the "Writing HLSL Shaders" programming guide topic under the heading "Writing Shader Fragments" and on the reference page "Fragment Declaration Syntax". 
<BR>
<BR>
More in-depth coverage of the process behind compiling and linking shader fragments is found in the "Using HLSL Shaders" programming guide topic under the heading "Building And Rendering Fragments".
<!-- FOOTER - DO NOT MODIFY -->
<BR clear="left">
<BR clear="left">
<BR clear="left">
<HR>
<CENTER>
Copyright (c) Microsoft Corporation. All rights reserved.
</CENTER>
<!-- END FOOTER -->

<!-- MASTER TABLE - DO NOT MODIFY -->
</TD>
</TR>
</TABLE>
<!-- END MASTER TABLE -->

</BODY>
</HTML>
